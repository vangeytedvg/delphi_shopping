unit frmMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Data.DB, Vcl.StdCtrls,
  Vcl.Mask, Vcl.DBCtrls, Vcl.Grids, Vcl.DBGrids, Vcl.ExtCtrls,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteWrapper.Stat, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, ovcbase, ovcclock, ovccmbx,
  ovcdvcbx, ovctcmmn, ovcdbtbl, DateUtils, DataMod, Vcl.Imaging.pngimage,
  VclTee.TeeGDIPlus, VclTee.TeEngine, VclTee.Series, VclTee.TeeProcs, ShellApi,
  VclTee.Chart, VclTee.DBChart;

type
  TForm9 = class(TForm)
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    File2: TMenuItem;
    ReferenceData1: TMenuItem;
    ReferenceData2: TMenuItem;
    DBGrid1: TDBGrid;
    DBNavExpenses: TDBNavigator;
    DBLookupShopsGRID: TDBLookupComboBox;
    mnuTools: TMenuItem;
    mnuToolsExport: TMenuItem;
    GroupBox1: TGroupBox;
    cmbMonth: TComboBox;
    Label4: TLabel;
    cmbYear: TComboBox;
    Label5: TLabel;
    btnApplyFilter: TButton;
    btnClearFilter: TButton;
    GroupBox2: TGroupBox;
    DBLookupComboBox1: TDBLookupComboBox;
    lblLocation: TLabel;
    DBEdit2: TDBEdit;
    Label2: TLabel;
    DBEdit1: TDBEdit;
    Label1: TLabel;
    pnlNoRecs: TPanel;
    Image1: TImage;
    SaveDialog1: TSaveDialog;
    Label3: TLabel;
    cmbShopFilter: TComboBox;
    mnuToolsGraph: TMenuItem;
    Label6: TLabel;
    cmbSortBy: TComboBox;
    cbASCDESC: TCheckBox;
    Statistics1: TMenuItem;
    GraphbyDate1: TMenuItem;
    procedure ReferenceData2Click(Sender: TObject);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid1ColExit(Sender: TObject);
    procedure DBGrid1KeyPress(Sender: TObject; var Key: Char);
    procedure File2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnApplyFilterClick(Sender: TObject);
    procedure btnClearFilterClick(Sender: TObject);
    procedure mnuToolsExportClick(Sender: TObject);
    procedure mnuToolsGraphClick(Sender: TObject);
    procedure cmbSortByChange(Sender: TObject);
    procedure cbASCDESCClick(Sender: TObject);
    procedure GraphbyDate1Click(Sender: TObject);
  private
    { Private declarations }
    origSql: String;
  public
    { Public declarations }
    procedure ShowNoRecords(IsVisible: boolean);
  end;

var
  Form9: TForm9;

implementation

uses
  frmShopEditor, graphView, graphByDate;

{$R *.dfm}

procedure TForm9.btnApplyFilterClick(Sender: TObject);
var
  sqlString: String;
  lastWordPos: Integer;
begin
  // Apply the filter the user specified
  sqlString :=
    'SELECT cast(expenses.EXPDATE  as text) as ed, EXPENSE_ID, AMOUNT , DATEEXPENSE , SHOPID , EXPDATE  from expenses WHERE';
  if cmbMonth.itemIndex <> -1 then
  begin
    sqlString := sqlString + ' SUBSTR(ed, 5,2) = ' +
      QuotedStr(cmbMonth.Text) + ' AND';
  end;
  if cmbYear.itemIndex <> -1 then
  begin
    sqlString := sqlString + ' substr(ed, 1,4) ="' + cmbYear.Text
      + '" AND';
  end;

  if cmbShopFilter.itemIndex <> -1 then
  begin
    sqlString := sqlString + ' SHOPID = ' +
      QuotedStr(cmbShopFilter.Text) + ' AND'
  end;

  if String.EndsText('WHERE', sqlString) then
  begin
    // Extract the last word WHERE from the string
    lastWordPos := LastDelimiter(' ', sqlString);
    sqlString := Copy(sqlString, 1, lastWordPos);
  end;

  if String.EndsText('AND', sqlString) then
  begin
    // Extract the last word AND from the string
    lastWordPos := LastDelimiter(' ', sqlString);
    sqlString := Copy(sqlString, 0, lastWordPos);
  end;

  pnlNoRecs.Visible := false;
  DataMod.DataModule1.ExpensesTable.Active := false;
  DataMod.DataModule1.ExpensesTable.sql.Clear;
  DataMod.DataModule1.ExpensesTable.sql.Add(sqlString);
  DataMod.DataModule1.ExpensesTable.Active := true;
  if DataMod.DataModule1.ExpensesTable.RowsAffected = 0 then
    // Show the panel on the main form
    ShowNoRecords(true)
  else
    ShowNoRecords(false);
end;

procedure TForm9.btnClearFilterClick(Sender: TObject);
begin
  DataMod.DataModule1.ExpensesTable.Active := false;
  DataMod.DataModule1.ExpensesTable.sql.Clear;
  DataMod.DataModule1.ExpensesTable.sql.Add('SELECT * FROM expenses');
  DataMod.DataModule1.ExpensesTable.Active := true;
  origSql := 'SELECT * FROM expenses';
  if DataMod.DataModule1.ExpensesTable.RowsAffected = 0 then
    // Show the panel on the main form
    ShowNoRecords(true)
  else
    ShowNoRecords(false);
end;

procedure TForm9.cbASCDESCClick(Sender: TObject);
begin
  if cbASCDESC.Checked then
    cbASCDESC.Caption := 'Descending'
  else
    cbASCDESC.Caption := 'Ascending';
end;

procedure TForm9.cmbSortByChange(Sender: TObject);
var
  sql: String;
begin
  // Change the sort order
  if origSql = '' then
  begin
    // Remember the original sort order
    origSql := DataModule1.ExpensesTable.sql.Text;
    sql := origSql;
  end
  else
    sql := origSql;

  sql := sql + ' ORDER BY ' + cmbSortBy.Text;

  // Check the sort order
  if cbASCDESC.Checked then
    sql := sql + ' DESC'
  else
    sql := sql + ' ASC';

  // Execute it
  DataModule1.ExpensesTable.Active := false;
  DataModule1.ExpensesTable.sql.Text := '';
  DataModule1.ExpensesTable.sql.Text := sql;
  DataModule1.ExpensesTable.Active := true;
end;

procedure TForm9.DBGrid1ColExit(Sender: TObject);
begin
  // Hide the dropdown when leaving the cell
  if DBGrid1.SelectedField.FieldName = DBLookupShopsGRID.DataField then
    DBLookupShopsGRID.Visible := false;
end;

procedure TForm9.DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  // Position the combobox and display it
  if gdFocused in State then
  begin
    if (Column.Field.FieldName = DBLookupShopsGRID.DataField) then
      with DBLookupShopsGRID do
      begin
        Left := Rect.Left + DBGrid1.Left;
        Top := Rect.Top + DBGrid1.Top;
        Width := 120; // Rect.Right - Rect.Left;
        Height := Rect.Bottom - Rect.Top;
        Visible := true;
      end;

  end;
end;

procedure TForm9.DBGrid1KeyPress(Sender: TObject; var Key: Char);
begin
  // In case of tab
  if (Key = chr(9)) then
    exit;
  if (DBGrid1.SelectedField.FieldName = DBLookupShopsGRID.DataField) then
  begin
    DBLookupShopsGRID.SetFocus;
    SendMessage(DBLookupShopsGRID.Handle, WM_CHAR, word(Key), 0);
  end;
end;

procedure TForm9.File2Click(Sender: TObject);
// Leave the application
begin
  Close;
end;

procedure TForm9.FormCreate(Sender: TObject);
var
  I: Integer;
  startYear: Integer;
  currMonth: String;
begin
  // Fill the month and year combos, make sure to have leading zeros
  // for months 1-9
  for I := 1 to 12 do
  begin
    cmbMonth.items.Add(Format('%.*d', [2, I]));
  end;
  // Return to five year in time
  startYear := DateUtils.YearOf(now) - 5;
  for I := startYear to DateUtils.YearOf(now) do
    cmbYear.items.Add(I.ToString);

  // Fill the sort by combo
  DataModule1.ExpensesTable.GetFieldNames(cmbSortBy.items);

  // Fill the Shops filter combo
  try
    DataModule1.ShopsTable.First;
    while not DataModule1.ShopsTable.eof do
    begin
      cmbShopFilter.items.Add(DataModule1.ShopsTable.FieldByName('SHOPID')
        .AsString);
      DataModule1.ShopsTable.Next;
    end;

  finally

  end;

end;

procedure TForm9.GraphbyDate1Click(Sender: TObject);
begin
  frmGraphByDate.Show;
end;

procedure TForm9.mnuToolsExportClick(Sender: TObject);
// Export the GRID currently displayed data to a CSV file
var
  CSVData: TStringList;
  RowData: String;
  ColIndex, RowIndex: Integer;
  selectedFile: String;
begin
  if DataMod.DataModule1.ExpensesTable.RecordCount > 0 then
  begin
    CSVData := TStringList.Create;
    try
      // First get the headers of the CSV file
      for ColIndex := 0 to DBGrid1.Columns.Count - 1 do
      begin
        if ColIndex > 0 then
          RowData := RowData + ',';
        RowData := RowData + DBGrid1.Columns[ColIndex].Title.Caption;
      end;
      CSVData.Add(RowData);
      // Now get the actual data
      for RowIndex := 0 to DBGrid1.DataSource.DataSet.RecordCount - 1 do
      begin
        DBGrid1.DataSource.DataSet.RecNo := RowIndex + 1;
        RowData := '';
        for ColIndex := 0 to DBGrid1.Columns.Count - 1 do
        begin
          if ColIndex > 0 then
            RowData := RowData + ',';
          RowData := RowData + '"' + DBGrid1.Columns[ColIndex]
            .Field.AsString + '"';
        end;
        CSVData.Add(RowData);
      end;
      if SaveDialog1.Execute then
      begin
        selectedFile := SaveDialog1.FileName;
        CSVData.SaveToFile(SaveDialog1.FileName);
        // Once exported, check if preview is needed, note that the name of the
        // file must be cast to a PChar for ShellApi
        if MessageDlg('Would you like to view the file?', mtConfirmation,
          [mbYes, mbNo], 0, mbYes) = mrYes then
        begin
          ShellExecute(Handle, 'open', PChar(selectedFile), nil, nil,
            SW_SHOWNORMAL)
        end;
      end;

    finally
      CSVData.Free;
    end;
  end
  else
    ShowMessage('There is no data to export, refine your filter!');
end;

procedure TForm9.mnuToolsGraphClick(Sender: TObject);
begin
  frmExpenseGraph.Show;
end;

procedure TForm9.ReferenceData2Click(Sender: TObject);
// Allow adding or removing shops
begin
  FormShopEditor.ShowModal();
end;

procedure TForm9.ShowNoRecords(IsVisible: boolean);
// Show the no records panel if no records found!
begin
  if IsVisible = true then
  begin
    pnlNoRecs.Visible := true;
    pnlNoRecs.Parent := DBGrid1;
    pnlNoRecs.Width := DBGrid1.ClientWidth;
    pnlNoRecs.Left := (DBGrid1.ClientWidth - pnlNoRecs.Width) div 2;
    pnlNoRecs.Top := (DBGrid1.ClientHeight - pnlNoRecs.Height) div 2;
  end
  else if IsVisible = false then
    pnlNoRecs.Visible := false;

end;

end.
